version: '3.8'

services:
  pato2-server:
    build:
      context: ./pato2-server
      dockerfile: Dockerfile
    container_name: pato2-server
    restart: unless-stopped
    ports:
      - "5000:5000"    # Web panel
      - "25565:25565"  # Minecraft proxy
      - "19132:19132/udp" # Bedrock UDP proxy
    environment:
      - NODE_ENV=production
      - DOMAIN=${DOMAIN:-pato2.duckdns.org}
      - PORT=5000
      - PROXY_TCP_PORT=25565
      - JWT_SECRET=${JWT_SECRET}
      - HOST_PC_TOKEN=${HOST_PC_TOKEN}
      - HOST_LEASE_TTL_MS=${HOST_LEASE_TTL_MS:-45000}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_FILE=logs/pato2.log
    volumes:
      - ./pato2-server/logs:/app/logs
      - ./pato2-server/data:/app/data
    networks:
      - pato2-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Optional: Redis for session storage and caching
  redis:
    image: redis:7-alpine
    container_name: pato2-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - pato2-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: pato2-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    networks:
      - pato2-network
    depends_on:
      - pato2-server
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: pato2-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - pato2-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Optional: Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: pato2-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - pato2-network
    depends_on:
      - prometheus

networks:
  pato2-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local